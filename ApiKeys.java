package twitterhistorycleanup;

import twitter4j.Twitter;
import twitter4j.auth.AccessToken;

import java.io.Serializable;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

/**
 * A class to store API keys to authenticate Twitter objects with.
 *
 * @author realityfabric
 */
public class ApiKeys implements Serializable {
    final private String consumerKey;
    final private String consumerSecret;
    final private String accessToken;
    final private String accessTokenSecret;

    /**
     * Creates the ApiKeys object and stores the API keys.
     * @param consumerKey Consumer Key generated by the Twitter API.
     * @param consumerSecret Consumer Secret generated by the Twitter API.
     * @param accessToken Access Token generated by the Twitter API.
     * @param accessTokenSecret Access Token Secret generated by the Twitter API.
     */
    public ApiKeys (String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {
        this.consumerKey = consumerKey;
        this.consumerSecret = consumerSecret;
        this.accessToken = accessToken;
        this.accessTokenSecret = accessTokenSecret;
    }

    /**
     * Uses the stored Consumer Keys to authenticate the user with an unauthenticated Twitter object.
     * @param twitter a Twitter object that has not had its Consumer keys authenticated.
     * @return a Twitter object that has been authenticated with the Consumer keys.
     */
    public Twitter setOAuthConsumer (Twitter twitter) {
        twitter.setOAuthConsumer(consumerKey, consumerSecret);

        return twitter;
    }

    /**
     * Uses the stored Consumer Keys to authenticate the user with an unauthenticated Twitter object.
     * @param twitter a Twitter object that has not had its Access Tokens authenticated.
     * @return a Twitter object that has been authenticated with the Access Tokens.
     */
    public Twitter setOAuthAccessToken (Twitter twitter) {
        twitter.setOAuthAccessToken(new AccessToken(accessToken, accessTokenSecret));

        return twitter;
    }

    /**
     * Reads a serialized ApiKeys object from a file and deserializes it. Example of use: ApiKeys ak = ApiKeys.readApiKeysFromFile('filename.dat');
     * @param filename the name of the file the serialized ApiKeys object is stored in
     * @return an ApiKeys object
     * @throws IOException
     * @throws ClassNotFoundException
     */
    public static ApiKeys readApiKeysFromFile (String filename) throws IOException, ClassNotFoundException {
        ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(filename));

        ApiKeys apikeys = (ApiKeys) objectInputStream.readObject();

        objectInputStream.close();

        return apikeys;
    }

    /**
     * Serializes and then writes the ApiKeys object to a file.
     * @param filename the name of the file that the serialized ApiKeys object will be written to
     * @throws IOException
     */
    public void writeApiKeysToFile (String filename) throws IOException {
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(filename));

        objectOutputStream.writeObject(this);

        objectOutputStream.close();
    }
}
